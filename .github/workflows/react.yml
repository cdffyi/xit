# This is a basic workflow to help you get started with Actions

name: Build and Deploy Apps

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the main branch
on:
  push:
    branches: [ react ]
  pull_request:
    branches: [ react ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: windows-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - name: Install python 3 32bit and 64bit
        run: |
          cd .build_scripts
          .\prep_python.ps1
          pip install virtualenv

      - name: Build 32 bit exe
        run: |
          virtualenv .env -p .build_scripts\pythonx86\tools\python.exe

          .env/Scripts/activate.ps1

          pip install .

          python ./build.py

      - name: Build 64 bit exe
        run: |
          virtualenv .env64 -p .build_scripts\python\tools\python.exe

          .env64/Scripts/activate.ps1

          pip install .

          python ./build.py

      - name: Archive production artifacts
        uses: actions/upload-artifact@v2
        with:
          name: xit-package
          path: .dist

  deploy:
    name: Create Release
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Install jq hub
        run: sudo apt install jq -y

      - uses: actions/download-artifact@v2
        with:
          name: xit-package
          path: ./

      - name: Set version
        run: |
          ver=$(cat ./release_notes.json | jq ".[-1].version" | tr -d '"')
          echo "::set-output name=VERSION::$ver"
          echo $ver
        id: deploy_info

      - name: Create Release
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}
        run: |
          export GITHUB_REPOSITORY=howzitcal/xitool.ml_serve
          tag_name=$(cat ./release_notes.json | jq ".[-1].version" | tr -d '"')
          asset_dir="./"
          assets=()
          for f in "$asset_dir"/*; do [ -f "$f" ] && assets+=(-a "$f"); done
          hub release create "${assets[@]}" -m "$tag_name" "$tag_name"

#      - name: Create Release
#        id: create_release
#        uses: actions/create-release@v1
#        env:
#          GITHUB_TOKEN: ${{ secrets.PAT }}
#        with:
#          tag_name: ${{ steps.deploy_info.outputs.VERSION }}
#          release_name: v${{ steps.deploy_info.outputs.VERSION }}
#          commitish: main
#          draft: false
#          prerelease: false
#          repo: xitool.ml_serve
#
#      - name: Upload Release Asset 64bit app
#        id: upload-release-asset
#        uses: actions/upload-release-asset@v1
#        env:
#          GITHUB_TOKEN: ${{ secrets.PAT }}
#        with:
#          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
#          asset_path: ./*
